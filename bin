#!/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _interopRequireDefault = require("@swc/helpers/lib/_interop_require_default.js").default;
var _slicedToArray = require("@swc/helpers/lib/_sliced_to_array.js").default;
var _regeneratorRuntime = /*#__PURE__*/ _interopRequireDefault(require("regenerator-runtime"));
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var fs_1 = require("fs");
var debug_1 = require("./lib/utils/debug");
var mergeDeep_1 = require("./lib/utils/mergeDeep");
var tryIt_1 = require("./lib/utils/tryIt");
function sendError(error) {
    console.error("\x1b[31mError\x1b[0m", error.message);
    process.exit(1);
}
function getArg(usage, name, alias) {
    {
        var value = process.argv.slice(2).find(function(arg) {
            return arg.startsWith("--".concat(name));
        });
        if (value) {
            var ref = _slicedToArray(value.split("="), 2), value_ = ref[1];
            return {
                has: true,
                name: name,
                value: value_
            };
        }
    }
    alias: {
        if (!alias) break alias;
        var value1 = process.argv.slice(2).find(function(arg) {
            return arg.startsWith("-".concat(alias));
        });
        if (value1) {
            var ref1 = _slicedToArray(value1.split("="), 2), value_1 = ref1[1];
            return {
                has: true,
                name: name,
                value: value_1
            };
        }
    }
    return {
        has: false,
        name: name
    };
}
function getStringArg(usage, name, alias) {
    var arg = getArg(usage, name, alias);
    if (arg.has) {
        if (!arg.value) sendError(new Error("".concat(name, " has no value")));
        return arg;
    }
    return {
        has: false,
        name: name
    };
}
function getBooleanArg(usage, name, alias) {
    var arg = getArg(usage, name, alias);
    if (arg.has) {
        if (!arg.value) return {
            has: true,
            name: name,
            value: true
        };
        if (arg.value === "true") return {
            has: true,
            name: name,
            value: true
        };
        if (arg.value === "false") return {
            has: true,
            name: name,
            value: false
        };
        sendError(new Error("".concat(name, ' has invalid value (only "true", "false", or nothing)')));
    }
    return {
        has: false,
        name: name
    };
}
var customConfig = {};
var configStrictLevels = [
    "literal",
    "strict",
    "stored"
];
//#region Config
{
    var setConfigArg = function setConfigArg(name, path, type) {
        var arg = type === "string" ? getStringArg("", name) : getBooleanArg("", name);
        if (arg.has) {
            if (type === "string" && !configStrictLevels.includes(arg.value)) {
                sendError(new Error("".concat(name, " has invalid value (only ").concat(configStrictLevels.join(", "), ")")));
            }
            deepSetter(customConfig, path, arg.value);
        }
    };
    var setLevelArg = function setLevelArg(name) {
        setConfigArg(name + ".comment", [
            "levels",
            name,
            "comment"
        ], "boolean");
        setConfigArg(name + ".level", [
            "levels",
            name,
            "level"
        ], "string");
    };
    setConfigArg("minify", [
        "minify"
    ], "boolean");
    setConfigArg("ofuscate", [
        "ofuscate"
    ], "boolean");
    setConfigArg("autoRun", [
        "autoRun"
    ], "boolean");
    setLevelArg("number");
}//#endregion
var configArg = getStringArg("Set config file", "config", "c");
function main() {
    return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.default.mark(function _callee() {
        var config;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    config = function() {
                        var config = {};
                        if (configArg.has) {
                            (0, debug_1.debugLog)("CONFIG", "Loading config:", configArg.value);
                            var file_ = (0, tryIt_1.tryIt)(true, function() {
                                return (0, fs_1.readFileSync)(configArg.value, "utf8");
                            });
                            if (file_.error) {
                                sendError(new Error("Cannot read config file: ".concat(configArg.value)));
                            }
                            var file = file_.value;
                            var config_ = (0, tryIt_1.tryIt)(true, function() {
                                return JSON.parse(file);
                            });
                            if (config_.error) {
                                sendError(new Error("Cannot parse config file: ".concat(configArg.value)));
                            }
                            config = config_.value;
                            (0, debug_1.debugLog)("CONFIG", "Loaded");
                        }
                        return (0, mergeDeep_1.mergeDeep)(config, customConfig);
                    }();
                    console.log(config);
                case 2:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
}
function deepSetter(obj, path, value) {
    if (path.length === 1) {
        // @ts-ignore
        obj[path[0]] = value;
        return;
    }
    // @ts-ignore
    if (!obj[path[0]]) {
        // @ts-ignore
        obj[path[0]] = {};
    }
    // @ts-ignore
    deepSetter(obj[path[0]], path.slice(1), value);
}
main();
